section.center data-background="#000"
  h2.white Questions

section.center
  p What is a scope gate?

section.center
  p What creates scope gates?

section.center
  p How can we get around them?

section.center
  p How can we create anonymous modules and classes?

section.center
  p What does Kernel#require do?

section.center
  p What does require 'foo' do?

section.center
  p Is there difference between require 'foo.rb' and require 'foo'?

section.center
  p What does require './foo' do?

section.center
  p What does require 'foo/bar' do?

section.center
  p What is the $LOAD_PATH (also known as $:)?

section.center
  p What is Kernel#require_relative?

section.center
  p What does Kernel#load do?

section.center data-background="#000"
  h2.white Ranges

section
  h2 Range
  p Represents an interval - a set of values with a beginning and an end, where the first value should be lower than the second

section
  h2 Range literals
  p b..e - includes the last element
  p b...e - excludes the last element

section
  h2 Range
  p Ranges can be constructed from any objects that can be compared with the <=> operator
  p 0..2
  p 'a'..'z'

section.center data-background="#000"
  h2.white Sets

section
  h2 Sets
  p A collection of unordered values with *no* duplicates

section
  h2 Sets
  p Set uses Hash as storage

section
  h2 Sets
  p Equality of elements is determined according to Object#eql? and Object#hash

section
  h2 Sets
  p Set assumes that the identity of each element does not change while it is stored

section
  h2 Sets
  p When a string is to be stored, a frozen copy of the string is stored instead unless the original string is already frozen

section.center data-background="#000"
  h2.white Enumerators

section.center
  p What is an Enumerator?

section.center
  p What does Enumerator#next do?

section.center
  p What does Object#to_enum do?

section.center
  p What does Object#enum_for do?

section.center
  pre: code.ruby contenteditable="true"
    '
      (1..20).map { |number| number ** 2 }.first(10)

section.center
  pre: code.ruby contenteditable="true"
    '
      require 'prime'

      (1..Float::INFINITY).select { |number| number.prime? }.first(10)

section.center
  pre: code.ruby contenteditable="true"
    '
      require 'prime'

      (1..Float::INFINITY).lazy.select { |number| number.prime? }.first(10)

section
  h2 Lazy enumerators
  p Lazy enumerators enumerate a collection only when needed

section
  h2 Lazy enumerators
  p Chaining them does not result in creating intermediate collections

section
  h2 Lazy enumerators
  p They can be used over infinite collections of values

section.center
  pre: code.ruby contenteditable="true"
    '
      User = Struct.new(:name, :age)

      users = [User.new("Bob", 37), User.new("Sally", 23), User.new("Andrew", 18), User.new("Bil", 48)]

      users.select do |user|
        p "Selecting " + user.name
        user.age > 19
      end.map do |user|
        p "Mapping to name " + user.name
        user.name
      end.map do |name|
        p "Counting letters " + name
        name.length
      end.to_a

section.center
  pre: code.ruby contenteditable="true"
    '
      User = Struct.new(:name, :age)

      users = [User.new("Bob", 37), User.new("Sally", 23), User.new("Andrew", 18), User.new("Bil", 48)]

      users.lazy.rselect do |user|
        p "Selecting " + user.name
        user.age > 19
      end.map do |user|
        p "Mapping to name " + user.name
        user.name
      end.map do |name|
        p "Counting letters " + name
        name.length
      end.to_a
